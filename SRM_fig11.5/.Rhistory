par(mfrow=c(2,2))
qqnorm(w, main="Normal Q-Q-Plot der Stichprobe w", xlab="theoretische Standardnormal-Quantile",
ylab="empirische Quantile")
qqline(w)
qqnorm(x, main="Normal Q-Q-Plot der Stichprobe x", xlab="theoretische Standardnormal-Quantile",
ylab="empirische Quantile")
qqline(x)
qqnorm(y, main="Normal Q-Q-Plot der Stichprobe y", xlab="theoretische Standardnormal-Quantile",
ylab="empirische Quantile")
qqline(y)
qqnorm(z, main="Normal Q-Q-Plot der Stichprobe z", xlab="theoretische Standardnormal-Quantile",
ylab="empirische Quantile")
qqline(z)
library(formatR)
install.packages("formatR")
library(yaml)
library(formatR)
tidy_app()
install.packages("shiny")
tidy_app()
tidy_app()
setwd("~/SRM/SRM_fig2.14")
library(yaml)
yaml.load_file("Metainfo.txt")
setwd("~/SRM/SRM_fig2.16")
setwd("~/SRM/SRM_fig2.16")
## clear history
rm(list = ls(all = TRUE))
graphics.off()
## install and load packages
libraries = c("zoo")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# figur16-well
# mit package car
library(car)
###
# Stichproben erzeugen
# Fuer Reproduktion mit fester seed
set.seed(1234)
x <- rnorm(100)
set.seed(1234)
y <- rexp(100)
par(mfrow=c(1,2))
#  col.lines=palette()[1] schwarze Sollgerade und KI
#qq.plot(x,dist="norm",envelope=.99, col=palette()[1], col.lines=palette()[1],
qqPlot(x,dist="norm",envelope=.99, col=palette()[1], col.lines=palette()[1],
main="Normal Q-Q-Plot",
xlab="theoretische Standardnormal-Quantile",
ylab="empirische Quantile")
#qq.plot(y,dist="exp",envelope=.99, col=palette()[1],
qqPlot(y,dist="exp",envelope=.99, col=palette()[1], col.lines=palette()[1],
main="Exponential Q-Q-Plot",
xlab="theoretische Standardexponential-Quantile",
ylab="empirische Quantile")
rm(list = ls(all = TRUE))
graphics.off()
library(car)
set.seed(1234)
x <- rnorm(100)
set.seed(1234)
y <- rexp(100)
par(mfrow=c(1,2))
##  col.lines=palette()[1] schwarze Sollgerade und KI
qqPlot(x,dist="norm",envelope=.99, col=palette()[1], col.lines=palette()[1],
main="Normal Q-Q-Plot",
xlab="theoretische Standardnormal-Quantile",
ylab="empirische Quantile")
qqPlot(y,dist="exp",envelope=.99, col=palette()[1], col.lines=palette()[1],
main="Exponential Q-Q-Plot",
xlab="theoretische Standardexponential-Quantile",
ylab="empirische Quantile")
tidy_app()
setwd("~/SRM/SRM_fig2.14")
yaml.load_file("Metainfo.txt")
yaml.load_file("Metainfo.txt")
setwd("~/SRM/SRM_fig2.14")
yaml.load_file("Metainfo.txt")
setwd("~/SRM/SRM_fig2.16")
yaml.load_file("Metainfo.txt")
setwd("~/SRM/SRM_fig2.16")
yaml.load_file("Metainfo.txt")
yaml.load_file("Metainfo.txt")
setwd("~/SRM/SRM_fig2.16")
yaml.load_file("Metainfo.txt")
setwd("~/SRM/SRM_fig4.2")
yaml.load_file("Metainfo.txt")
setwd("~/SRM/SRM_fig2.14")
yaml.load_file("Metainfo.txt")
setwd("~/SRM/SRM_fig4.2")
setwd("~/SRM/SRM_fig2.16")
yaml.load_file("Metainfo.txt")
setwd("~/SRM/SRM_fig2.16")
yaml.load_file("Metainfo.txt")
setwd("~/SRM/SRM_fig2.14")
yaml.load_file("Metainfo.txt")
setwd("~/SRM/SRM_fig2.16")
yaml.load_file("Metainfo.txt")
setwd("~/SRM/SRM_fig4.2")
##############################
#Bild Gütefunktion           #
#Abbildung 4.2 G??tefunktion  #
##############################
WertMu0<-2.3      #Erwartungswert in der Nullhypothese
WertSigma<-1.672	#Bekannte Standardabweichung
WertN<-36   	#Stichprobengr??e
Alpha1<-0.05	#Signifikanzniveau
U1<-qt(1-Alpha1/2,WertN-1) 	#Quantil
Lambda<- function(mu) sqrt(WertN)*(mu-WertMu0)/WertSigma #Erwartungswert von T
#Definition der Funktion G
Fehler1<- function(mu) 1-pt(U1,WertN-1,Lambda(mu))+pt(-U1,WertN-1,Lambda(mu))
#Zeichnung von G #Achsenbeschriftung mit griechischen Buchstaben, Info ?plotmath !!
curve(Fehler1,1,3.5,ylab=expression(paste("Gütefunktion:  ",G(mu))) , xlab=expression(mu))
#Wie oben mit einem zweiten Signifikanzniveau
Alpha2<-0.1
U2<-qt(1-Alpha2/2,WertN-1)
Fehler2<- function(mu) 1-( pt(U2,WertN-1,Lambda(mu))-pt(-U2,WertN-1,Lambda(mu)))
curve(Fehler2,1,3.5, add=TRUE, lty=2)	#F?ge Zweite Funktion
text(1.50,0.6, expression( alpha==0.05))	#Beschriftung obere Funktion
text(2.1,0.4, expression( alpha==0.1))	#Beschriftung untere Funktion
segments(0,0.05,2.3,0.05)			#y=0.95
segments(0,0.10,2.3,0.10,lty=3)		#y=0.9
text(1.25,0.08, expression(paste("G(2,3)=",alpha)))	#Beschriftung der beiden oberen
title("Gütefunktion")
par(nfrom(c(1,1)))
?par
par(mfrow = c(1, 1))
par(mfrow = c(1, 1))
WertMu0<-2.3      #Erwartungswert in der Nullhypothese
WertSigma<-1.672	#Bekannte Standardabweichung
par(mfrow = c(1, 1))
WertMu0<-2.3      #Erwartungswert in der Nullhypothese
rm(list = ls(all = TRUE))
graphics.off()
par(mfrow = c(1, 1))
WertMu0<-2.3      #Erwartungswert in der Nullhypothese
WertSigma<-1.672	#Bekannte Standardabweichung
WertN<-36   	#Stichprobengr??e
Alpha1<-0.05	#Signifikanzniveau
U1<-qt(1-Alpha1/2,WertN-1) 	#Quantil
Lambda<- function(mu) sqrt(WertN)*(mu-WertMu0)/WertSigma #Erwartungswert von T
Fehler1<- function(mu) 1-pt(U1,WertN-1,Lambda(mu))+pt(-U1,WertN-1,Lambda(mu))
curve(Fehler1,1,3.5,ylab=expression(paste("Gütefunktion:  ",G(mu))) , xlab=expression(mu))
curve(Fehler1,1,3.5,ylab=expression(paste("Gütefunktion:  ",G(mu))) , xlab=expression(mu))
Alpha2<-0.1
U2<-qt(1-Alpha2/2,WertN-1)
Fehler2<- function(mu) 1-( pt(U2,WertN-1,Lambda(mu))-pt(-U2,WertN-1,Lambda(mu)))
curve(Fehler2,1,3.5, add=TRUE, lty=2)	#F?ge Zweite Funktion
text(1.50,0.6, expression( alpha==0.05))	#Beschriftung obere Funktion
text(2.1,0.4, expression( alpha==0.1))	#Beschriftung untere Funktion
segments(0,0.05,2.3,0.05)			#y=0.95
segments(0,0.10,2.3,0.10,lty=3)		#y=0.9
text(1.25,0.08, expression(paste("G(2,3)=",alpha)))	#Beschriftung der beiden oberen
title("Gütefunktion")
rm(list = ls(all = TRUE))
graphics.off()
par(mfrow = c(1, 1))
WertMu0<-2.3      #Erwartungswert in der Nullhypothese
WertSigma<-1.672	#Bekannte Standardabweichung
WertN<-36
Alpha1<-0.05   	#Signifikanzniveau
U1<-qt(1-Alpha1/2,WertN-1) 	#Quantil
Lambda<- function(mu) sqrt(WertN)*(mu-WertMu0)/WertSigma #Erwartungswert von T
## Definition der Funktion G
Fehler1<- function(mu) 1-pt(U1,WertN-1,Lambda(mu))+pt(-U1,WertN-1,Lambda(mu))
## Zeichnung von Funktion G
curve(Fehler1,1,3.5,ylab=expression(paste("Gütefunktion:  ",G(mu))) , xlab=expression(mu))
## Wie oben mit einem zweiten Signifikanzniveau
Alpha2<-0.1
U2<-qt(1-Alpha2/2,WertN-1)
Fehler2<- function(mu) 1-( pt(U2,WertN-1,Lambda(mu))-pt(-U2,WertN-1,Lambda(mu)))
curve(Fehler2,1,3.5, add=TRUE, lty=2)
## Beschriftung obere Funktion
text(1.50,0.6, expression( alpha==0.05))
## Beschriftung untere Funktion
text(2.1,0.4, expression( alpha==0.1))
segments(0,0.05,2.3,0.05)			    #y=0.95
segments(0,0.10,2.3,0.10,lty=3)		#y=0.9
text(1.25,0.08, expression(paste("G(2,3)=",alpha)))
title("Gütefunktion")
title(\text("Gü"))
## clear history
rm(list = ls(all = TRUE))
graphics.off()
## install and load packages
libraries = c("car")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
## Bild Gütefunktion
par(mfrow = c(1, 1))
WertMu0<-2.3      #Erwartungswert in der Nullhypothese
WertSigma<-1.672	#Bekannte Standardabweichung
WertN<-36
Alpha1<-0.05   	#Signifikanzniveau
U1<-qt(1-Alpha1/2,WertN-1) 	#Quantil
Lambda<- function(mu) sqrt(WertN)*(mu-WertMu0)/WertSigma #Erwartungswert von T
## Definition der Funktion G
Fehler1<- function(mu) 1-pt(U1,WertN-1,Lambda(mu))+pt(-U1,WertN-1,Lambda(mu))
## Zeichnung von Funktion G
curve(Fehler1,1,3.5,ylab=expression(paste("Gütefunktion:  ",G(mu))) , xlab=expression(mu))
## Wie oben mit einem zweiten Signifikanzniveau
Alpha2<-0.1
U2<-qt(1-Alpha2/2,WertN-1)
Fehler2<- function(mu) 1-( pt(U2,WertN-1,Lambda(mu))-pt(-U2,WertN-1,Lambda(mu)))
curve(Fehler2,1,3.5, add=TRUE, lty=2)
## Beschriftung obere Funktion
text(1.50,0.6, expression( alpha==0.05))
## Beschriftung untere Funktion
text(2.1,0.4, expression( alpha==0.1))
segments(0,0.05,2.3,0.05)			    #y=0.95
segments(0,0.10,2.3,0.10,lty=3)		#y=0.9
text(1.25,0.08, expression(paste("G(2,3)=",alpha)))
#title("Gütefunktion")
title("Gutefunktion")
tidy_app()
tidy_app()
tidy_app()
tidy_app()
## clear history
rm(list = ls(all = TRUE))
graphics.off()
## Bild G<U+00FC>tefunktion
par(mfrow = c(1, 1))
WertMu0 = 2.3  #Erwartungswert in der Nullhypothese
WertSigma = 1.672  #Bekannte Standardabweichung
WertN = 36
Alpha1 = 0.05  #Signifikanzniveau
U1 = qt(1 - Alpha1/2, WertN - 1)  #Quantil
Lambda = function(mu) sqrt(WertN) * (mu - WertMu0)/WertSigma  #Erwartungswert von T
## Definition der Funktion G
Fehler1 = function(mu) 1 - pt(U1, WertN - 1, Lambda(mu)) + pt(-U1, WertN -
1, Lambda(mu))
## Zeichnung von Funktion G
curve(Fehler1, 1, 3.5,
ylab = expression(paste("G<U+00FC>tefunktion:  ", G(mu))),
xlab = expression(mu))
## Wie oben mit einem zweiten Signifikanzniveau
Alpha2 = 0.1
U2 = qt(1 - Alpha2/2, WertN - 1)
Fehler2 = function(mu) 1 - (pt( U2, WertN - 1, Lambda(mu)) -
pt(-U2, WertN - 1, Lambda(mu)))
curve(Fehler2, 1, 3.5, add = TRUE, lty = 2)
## Beschriftung obere Funktion
text(1.5, 0.6, expression(alpha == 0.05))
## Beschriftung untere Funktion
text(2.1, 0.4, expression(alpha == 0.1))
segments(0, 0.05, 2.3, 0.05)
segments(0, 0.1, 2.3, 0.1, lty = 3)
text(1.25, 0.08, expression(paste("G(2,3)=", alpha)))
title('G<U+00FC>tefunktion')
#title("Gutefunktion")
setwd("~/SRM/SRM_fig4.2")
rm(list = ls(all = TRUE))
graphics.off()
## Bild Gutefunktion
par(mfrow = c(1, 1))
WertMu0   = 2.3    #Erwartungswert in der Nullhypothese
WertSigma = 1.672  #Bekannte Standardabweichung
WertN     = 36
Alpha1    = 0.05   #Signifikanzniveau
U1        = qt(1 - Alpha1/2, WertN - 1)                          #Quantil
Lambda    = function(mu) sqrt(WertN) * (mu - WertMu0)/WertSigma  #Erwartungswert von T
## Definition der Funktion G
Fehler1 = function(mu) 1 - pt(U1, WertN - 1, Lambda(mu)) +
pt(-U1, WertN - 1, Lambda(mu))
## Zeichnung von Funktion G
curve(Fehler1, 1, 3.5,
ylab = expression(paste("Gutefunktion:  ", G(mu))),
xlab = expression(mu))
## Wie oben mit einem zweiten Signifikanzniveau
Alpha2  = 0.1
U2      = qt(1 - Alpha2/2, WertN - 1)
Fehler2 = function(mu) 1 - (pt( U2, WertN - 1, Lambda(mu)) -
pt(-U2, WertN - 1, Lambda(mu)))
curve(Fehler2, 1, 3.5, add = TRUE, lty = 2)
## Beschriftung obere Funktion
text(1.5, 0.6, expression(alpha == 0.05))
## Beschriftung untere Funktion
text(2.1, 0.4, expression(alpha == 0.1))
segments(0, 0.05, 2.3, 0.05)
segments(0, 0.1, 2.3, 0.1, lty = 3)
text(1.25, 0.08, expression(paste("G(2,3)=", alpha)))
title('Gutefunktion')
#title("Gutefunktion")
## clear history
rm(list = ls(all = TRUE))
graphics.off()
## Bild Gutefunktion
par(mfrow = c(1, 1))
WertMu0   = 2.3    #Erwartungswert in der Nullhypothese
WertSigma = 1.672  #Bekannte Standardabweichung
WertN     = 36
Alpha1    = 0.05   #Signifikanzniveau
U1        = qt(1 - Alpha1/2, WertN - 1)                          #Quantil
Lambda    = function(mu) sqrt(WertN) * (mu - WertMu0)/WertSigma  #Erwartungswert von T
## Definition der Funktion G
Fehler1 = function(mu) 1 - pt(U1, WertN - 1, Lambda(mu)) +
pt(-U1, WertN - 1, Lambda(mu))
## Zeichnung von Funktion G
curve(Fehler1, 1, 3.5,
ylab = expression(paste("Gutefunktion:  ", G(mu))),
xlab = expression(mu))
## Wie oben mit einem zweiten Signifikanzniveau
Alpha2  = 0.1
U2      = qt(1 - Alpha2/2, WertN - 1)
Fehler2 = function(mu) 1 - (pt( U2, WertN - 1, Lambda(mu)) -
pt(-U2, WertN - 1, Lambda(mu)))
curve(Fehler2, 1, 3.5, add = TRUE, lty = 2)
## Beschriftung obere Funktion
text(1.5, 0.6, expression(alpha == 0.05))
## Beschriftung untere Funktion
text(2.1, 0.4, expression(alpha == 0.1))
segments(0, 0.05, 2.3, 0.05)
segments(0, 0.1, 2.3, 0.1, lty = 3)
text(1.25, 0.08, expression(paste("G(2,3)=", alpha)))
title("Gutefunktion")
setwd("~/SRM/SRM_fig4.2")
yaml.load_file("Metainfo.txt")
setwd("~/SRM/SRM_fig4.6")
yaml.load_file("Metainfo.txt")
yaml.load_file("Metainfo.txt")
tidy_app()
rm(list = ls(all = TRUE))
graphics.off()
## Konfidentintervalle mit dem LQT
y = 4  # 4 treffer bei 50 Beobachtungen
n = 50
p_Dach = y/n  #ML-Schaetzer fur Binomialverteilung
# Funktionen
L = function(p) p^y * (1 - p)^(n - y)  #Likelihood
LR = function(p) L(p)/L(p_Dach)        #Relative Likelihood
par(mfrow = c(1, 2))
## Zeichne Relative Likelihood
curve(LR, 0, 0.3, ylab = NA, xlab = expression(italic(theta1)), lwd = 2)
mtext(expression(tilde(italic(L))), side = 2, line = 2)
segments(0.08, 0, 0.08, 1, lty = 2, lwd = 2)  #Vertikale in p-Dach
c1 = exp(-qchisq(0.95, 1)/2)  #c1=95% Quantil der Chi^2_1
c2 = exp(-qchisq(0.9, 1)/2)  #c2=90% Quantil der Chi^2_1
segments(0.02, c1, 0.175, c1, lty = 2, lwd = 2)  #Horizontale in c1
segments(0, c2, 0.158, c2, lty = 1, lwd = 2)  #Horizontale in c2
segments(0.032, 0, 0.032, c2, lwd = 2)  #Vertikale 1 zu c2\t
segments(0.158, 0, 0.158, c2, lwd = 2)  #Vertikale 2 zu c2
segments(0.025, 0, 0.025, c1, lwd = 2, lty = 2)  #Vertikale 1 zu c1
segments(0.175, 0, 0.175, c1, lwd = 2, lty = 2)  #Vertikale 2 zu c1
text(0.15, c2 + 0.04, expression(1 - alpha == 0.9))
text(0.16, c1 + 0.04, expression(1 - alpha == 0.95))
# text(0.01,c1,expression(lambda[alpha]))
# Zeichne Relative Log-Likelihood
LLR = function(p) -2 * log(LR(p), base = exp(1))
curve(LLR, 0, 0.3, ylab = NA, xlab = expression(italic(theta1)), lwd = 2,
ylim = c(-1, 17))
mtext(expression(-2(italic(l)(theta1) - italic(l)(hat(theta1)))), side = 2,
line = 2)
segments(0.08, -1, 0.08, 15, lty = 2, lwd = 2)  #Vertikale in p-Dach
c1 = qchisq(0.95, 1)  #c1=95% Quantil der Chi^2_1
c2 = qchisq(0.9, 1)  #c2=90% Quantil der Chi^2_1
segments(0.02, c1, 0.175, c1, lty = 2, lwd = 2)  #Horizontale in c1
segments(0, c2, 0.158, c2, lty = 1, lwd = 2)  #Horizontale in c2
segments(0.032, -1, 0.032, c2, lwd = 2)  #Vertikale 1 zu c2\t
segments(0.158, -1, 0.158, c2, lwd = 2)  #Vertikale 2 zu c2
segments(0.025, -1, 0.025, c1, lwd = 2, lty = 2)  #Vertikale 1 zu c1
segments(0.175, -1, 0.175, c1, lwd = 2, lty = 2)  #Vertikale 2 zu c1
text(0.15, c2 + 0.6, expression(1 - alpha == 0.9))
text(0.16, c1 + 0.6, expression(1 - alpha == 0.95))
## clear history
rm(list = ls(all = TRUE))
graphics.off()
## Konfidentintervalle mit dem LQT
y      = 4                             # 4 treffer bei 50 Beobachtungen
n      = 50
p_Dach = y/n                           # ML-Schaetzer fur Binomialverteilung
# Funktionen
L = function(p) p^y * (1 - p)^(n - y)  #Likelihood
LR = function(p) L(p)/L(p_Dach)        #Relative Likelihood
par(mfrow = c(1, 2))
## Zeichne Relative Likelihood
curve(LR, 0, 0.3, ylab = NA, xlab = expression(italic(theta1)), lwd = 2)
mtext(expression(tilde(italic(L))), side = 2, line = 2)
segments(0.08, 0, 0.08, 1, lty = 2, lwd = 2)     #Vertikale in p-Dach
c1 = exp(-qchisq(0.95, 1)/2)                     #c1=95% Quantil der Chi^2_1
c2 = exp(-qchisq(0.9, 1)/2)                      #c2=90% Quantil der Chi^2_1
segments(0.02, c1, 0.175, c1, lty = 2, lwd = 2)  #Horizontale in c1
segments(0, c2, 0.158, c2, lty = 1, lwd = 2)     #Horizontale in c2
segments(0.032, 0, 0.032, c2, lwd = 2)           #Vertikale 1 zu c2\t
segments(0.158, 0, 0.158, c2, lwd = 2)           #Vertikale 2 zu c2
segments(0.025, 0, 0.025, c1, lwd = 2, lty = 2)  #Vertikale 1 zu c1
segments(0.175, 0, 0.175, c1, lwd = 2, lty = 2)  #Vertikale 2 zu c1
text(0.15, c2 + 0.04, expression(1 - alpha == 0.9))
text(0.16, c1 + 0.04, expression(1 - alpha == 0.95))
# text(0.01,c1,expression(lambda[alpha]))
# Zeichne Relative Log-Likelihood
LLR = function(p) -2 * log(LR(p), base = exp(1))
curve(LLR, 0, 0.3, ylab = NA, xlab = expression(italic(theta1)), lwd = 2,
ylim = c(-1, 17))
mtext(expression(-2(italic(l)(theta1) - italic(l)(hat(theta1)))), side = 2,
line = 2)
segments(0.08, -1, 0.08, 15, lty = 2, lwd = 2)    #Vertikale in p-Dach
c1 = qchisq(0.95, 1)                              #c1=95% Quantil der Chi^2_1
c2 = qchisq(0.9, 1)                               #c2=90% Quantil der Chi^2_1
segments(0.02, c1, 0.175, c1, lty = 2, lwd = 2)   #Horizontale in c1
segments(0, c2, 0.158, c2, lty = 1, lwd = 2)      #Horizontale in c2
segments(0.032, -1, 0.032, c2, lwd = 2)           #Vertikale 1 zu c2\t
segments(0.158, -1, 0.158, c2, lwd = 2)           #Vertikale 2 zu c2
segments(0.025, -1, 0.025, c1, lwd = 2, lty = 2)  #Vertikale 1 zu c1
segments(0.175, -1, 0.175, c1, lwd = 2, lty = 2)  #Vertikale 2 zu c1
text(0.15, c2 + 0.6, expression(1 - alpha == 0.9))
text(0.16, c1 + 0.6, expression(1 - alpha == 0.95))
curve(LR, 0, 0.3, ylab = NA, xlab = expression(italic(theta1)), lwd = 2)
mtext(expression(tilde(italic(L))), side = 2, line = 2)
segments(0.08, 0, 0.08, 1, lty = 2, lwd = 2)     #Vertikale in p-Dach
c1 = exp(-qchisq(0.95, 1)/2)                     #c1=95% Quantil der Chi^2_1
c2 = exp(-qchisq(0.9, 1)/2)                      #c2=90% Quantil der Chi^2_1
segments(0.02, c1, 0.175, c1, lty = 2, lwd = 2)  #Horizontale in c1
segments(0, c2, 0.158, c2, lty = 1, lwd = 2)     #Horizontale in c2
segments(0.032, 0, 0.032, c2, lwd = 2)           #Vertikale 1 zu c2\t
segments(0.158, 0, 0.158, c2, lwd = 2)           #Vertikale 2 zu c2
segments(0.025, 0, 0.025, c1, lwd = 2, lty = 2)  #Vertikale 1 zu c1
segments(0.175, 0, 0.175, c1, lwd = 2, lty = 2)  #Vertikale 2 zu c1
text(0.15, c2 + 0.04, expression(1 - alpha == 0.9))
text(0.16, c1 + 0.04, expression(1 - alpha == 0.95))
# text(0.01,c1,expression(lambda[alpha]))
# Zeichne Relative Log-Likelihood
LLR = function(p) -2 * log(LR(p), base = exp(1))
curve(LLR, 0, 0.3, ylab = NA, xlab = expression(italic(theta1)), lwd = 2,
ylim = c(-1, 17))
mtext(expression(-2(italic(l)(theta1) - italic(l)(hat(theta1)))), side = 2,
line = 2)
segments(0.08, -1, 0.08, 15, lty = 2, lwd = 2)    #Vertikale in p-Dach
c1 = qchisq(0.95, 1)                              #c1=95% Quantil der Chi^2_1
c2 = qchisq(0.9, 1)                               #c2=90% Quantil der Chi^2_1
segments(0.02, c1, 0.175, c1, lty = 2, lwd = 2)   #Horizontale in c1
segments(0, c2, 0.158, c2, lty = 1, lwd = 2)      #Horizontale in c2
segments(0.032, -1, 0.032, c2, lwd = 2)           #Vertikale 1 zu c2\t
segments(0.158, -1, 0.158, c2, lwd = 2)           #Vertikale 2 zu c2
segments(0.025, -1, 0.025, c1, lwd = 2, lty = 2)  #Vertikale 1 zu c1
segments(0.175, -1, 0.175, c1, lwd = 2, lty = 2)  #Vertikale 2 zu c1
text(0.15, c2 + 0.6, expression(1 - alpha == 0.9))
text(0.16, c1 + 0.6, expression(1 - alpha == 0.95))
## Konfidentintervalle mit dem LQT
y      = 4                             # 4 treffer bei 50 Beobachtungen
n      = 50
p_Dach = y/n                           # ML-Schaetzer fur Binomialverteilung
## Funktionen
L = function(p) p^y * (1 - p)^(n - y)  #Likelihood
LR = function(p) L(p)/L(p_Dach)        #Relative Likelihood
par(mfrow = c(1, 2))
## Zeichne Relative Likelihood
curve(LR, 0, 0.3, ylab = NA, xlab = expression(italic(theta1)), lwd = 2)
mtext(expression(tilde(italic(L))), side = 2, line = 2)
segments(0.08, 0, 0.08, 1, lty = 2, lwd = 2)     #Vertikale in p-Dach
c1 = exp(-qchisq(0.95, 1)/2)                     #c1=95% Quantil der Chi^2_1
c2 = exp(-qchisq(0.9, 1)/2)                      #c2=90% Quantil der Chi^2_1
segments(0.02, c1, 0.175, c1, lty = 2, lwd = 2)  #Horizontale in c1
segments(0, c2, 0.158, c2, lty = 1, lwd = 2)     #Horizontale in c2
segments(0.032, 0, 0.032, c2, lwd = 2)           #Vertikale 1 zu c2\t
segments(0.158, 0, 0.158, c2, lwd = 2)           #Vertikale 2 zu c2
segments(0.025, 0, 0.025, c1, lwd = 2, lty = 2)  #Vertikale 1 zu c1
segments(0.175, 0, 0.175, c1, lwd = 2, lty = 2)  #Vertikale 2 zu c1
text(0.15, c2 + 0.04, expression(1 - alpha == 0.9))
text(0.16, c1 + 0.04, expression(1 - alpha == 0.95))
# text(0.01,c1,expression(lambda[alpha]))
## Zeichne Relative Log-Likelihood
LLR = function(p) -2 * log(LR(p), base = exp(1))
curve(LLR, 0, 0.3, ylab = NA, xlab = expression(italic(theta1)), lwd = 2,
ylim = c(-1, 17))
mtext(expression(-2(italic(l)(theta1) - italic(l)(hat(theta1)))), side = 2,
line = 2)
segments(0.08, -1, 0.08, 15, lty = 2, lwd = 2)    #Vertikale in p-Dach
c1 = qchisq(0.95, 1)                              #c1=95% Quantil der Chi^2_1
c2 = qchisq(0.9, 1)                               #c2=90% Quantil der Chi^2_1
segments(0.02, c1, 0.175, c1, lty = 2, lwd = 2)   #Horizontale in c1
segments(0, c2, 0.158, c2, lty = 1, lwd = 2)      #Horizontale in c2
segments(0.032, -1, 0.032, c2, lwd = 2)           #Vertikale 1 zu c2\t
segments(0.158, -1, 0.158, c2, lwd = 2)           #Vertikale 2 zu c2
segments(0.025, -1, 0.025, c1, lwd = 2, lty = 2)  #Vertikale 1 zu c1
segments(0.175, -1, 0.175, c1, lwd = 2, lty = 2)  #Vertikale 2 zu c1
text(0.15, c2 + 0.6, expression(1 - alpha == 0.9))
text(0.16, c1 + 0.6, expression(1 - alpha == 0.95))
setwd("~/SRM/SRM_fig4.6")
yaml.load_file("Metainfo.txt")
setwd("~/SRM/SRM_fig4.2")
yaml.load_file("Metainfo.txt")
setwd("~/SRM/SRM_fig1.1")
yaml.load_file("Metainfo.txt")
tidy_app()
## clear history
rm(list = ls(all = TRUE))
graphics.off()
## Zeichne die verallg. Inf fuer B(5,0.4)
par(mfrow = c(1, 2))
p = 0.4
n = 5
curve(pbinom(x, n, p), from = -1, to = 6, type = "s", ylab = expression(),
lwd = 3, col = "black")
title("Verteilungsfunktion")
curve(qbinom(x, n, p), from = 0, to = 1, type = "s", ylab = expression(),
xlab = expression(u), lwd = 3, col = "black")
title("Pseudoinverse")
setwd("~/SRM/SRM_fig5.5")
yaml.load_file("Metainfo.txt.txt")
libraries = c("QRM")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
plot(rcopula.clayton(500,3,2), pch = 19, ann = F, cex = 0.6, cex.axis = 0.6)
plot(rcopula.frank(500,6,2), pch = 19, ann = F, cex = 0.6, cex.axis = 0.6)
tidy_app()
